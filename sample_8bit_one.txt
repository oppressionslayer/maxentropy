In [39]: betterthanzip()                                                                                                                                            
The following shows that there is a odd/even map relation ship to an original number, by just it's high/low map and a 1-4 digit 
XOR value. Using just the HIGH/LOW MAP and ODD/EVEN MAP to generate the XOR number only works about 33% of the time. So i found 
a way to generate the ODD/EVEN MAP and XOR Value, agorithimically with the high/low map. This gives you more information about 
your higher order number and shows that you can get back to your original number with just a HIGH/LOW Map and an ODD/EVEN Map. 
After these explanations, is it's relationship to AMillionRandomDigits, which the same structure applies too. 
That is, AMillionRandomDigits, is it's HIGH/LOW MAP, it's ODD/EVEN MAP, and a 4 digit XOR value to get back to it. And I can 
generate those ODD/EVEN Values and XOR values for 4 digit and 8 digit random numbers! For AMillionRandomDigits, i can do something 
amazing, using this same alogithim! I can generate the 4 digit XOR values, which generate a 86420 numbers, which is the ODD/EVEN 
MAP Away!. Imagine if i could do the same algorithm for a 10 digit number! Read further below for an explanation about AMillionRandomDigits
+----------------------------------------------------------------------------------------------------------------+
Here is the 4 digit random number you created using betterthanzip(4) or betterthanzip(8) for different digit sizes
+----------------------------------------------------------------------------------------------------------------+
0x686628668446224444488284422466642268222248488642884262646684882226242882688268846626246682846266648826482422824
+----------------------------------------------------------------------------------------------------------------+
Here is the value of the random number XOR'd with the HIGH/LOW MAP*6 ADDED to the ODD/EVEN MAP 
+----------------------------------------------------------------------------------------------------------------+
0x0e002e00e4402244444ee2e442240004220e22224e4ee042ee42020400e4ee2220242ee20ee20ee400202400e2e4020004ee204e2422e24
+----------------------------------------------------------------------------------------------------------------+
Here is the value of the ODD/EVEN map + the HIGH/LOW MAP*6 
+----------------------------------------------------------------------------------------------------------------+
0x666606666006000000066060000066600066000006066600660060606660660006000660666066606606006660606066606606060000600
+----------------------------------------------------------------------------------------------------------------+
Here is the HIGH/LOW map, which can be generated by this very cool algorithm that doesn't use a loop. Pure Mathematics!
for a HIGH/LOW Map! By yours truly:  hex((int(str(int(randnum) + int(randnum)),16) - (int(randnum,16) + int(randnum,16))
+----------------------------------------------------------------------------------------------------------------+
0x6666066660060000000660600000666000660000060666006600606066606600060006606660666066060066606060666066060600006
0x1111011110010000000110100000111000110000010111001100101011101100010001101110111011010011101010111011010100001
+----------------------------------------------------------------------------------------------------------------+
Here is the  ODD/EVEN map generated by my Algorithm: 
+----------------------------------------------------------------------------------------------------------------+
0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
+----------------------------------------------------------------------------------------------------------------+
These are the stored values on disk to generate the ODD/EVEN Values and XOR Values back to the original with the HIGH/LOW: 
+----------------------------------------------------------------------------------------------------------------+
0x010001001110001111111011100100010001000011111010111000010011110000010110011001110000010010110000011100110100101
+----------------------------------------------------------------------------------------------------------------+
Here are the XOR values and the HIGH/LOW MAP added to the ODD/EVEN MAP, which the XOR value of both, is the original! 
All of these values are generated algorithimically. Remember, while you can do this other ways, this way show a relationship 
between an unrealated number, and the HIGH/LOW MAP, which recreated values needed to be just a MAP away, which we can also 
generate algorithimically, with just the unrelated number. You get more information about you original number. For 
AMillionRandomDigits, the shift from an 8digit to 10digit number, seems to be only it's ODD/EVEN Map! 
These next two values are Generated From our saved data, they are XOR'd to get to the orignal. Another way to point on the 
Relationship, is that the ORIGINAL XOR'ed by the FIRST value here is the SECOND VALUE. The SECOND VALUE is the DDD/EVEN 
added to the HIGH/LOW MAP. Remember, you can't do this without an algorithmically created unrelated number. Otherwise 
You XOR only works about 33% of the time if you try just using the ODD/EVEN map, so we cleverly recreate that with a new value 
which also gives the XOR. Remember, there is a relationship with AMillionRandomDigits which i explain below.
+----------------------------------------------------------------------------------------------------------------+
0x0e002e00e4402244444ee2e442240004220e22224e4ee042ee42020400e4ee2220242ee20ee20ee400202400e2e4020004ee204e2422e24
0x666606666006000000066060000066600066000006066600660060606660660006000660666066606606006660606066606606060000600
+----------------------------------------------------------------------------------------------------------------+
And the two values we generated from our saved data above are exactly the distance to the original. The same formula on a 
10 digit random number is it's ODD/EVEN MAP value! The  difference between a 4 and 8 digit random number, is an 
ODD/EVEN MAP!!! Which we can generate for lower than 8 digit numbers. This value is the two above numbers above XOR'ed together: 
+----------------------------------------------------------------------------------------------------------------+
0x686628668446224444488284422466642268222248488642884262646684882226242882688268846626246682846266648826482422824
+----------------------------------------------------------------------------------------------------------------+
The next number is the original for comparison: (Notice we get better compression than ZIP below!)
+----------------------------------------------------------------------------------------------------------------+
0x686628668446224444488284422466642268222248488642884262646684882226242882688268846626246682846266648826482422824
+----------------------------------------------------------------------------------------------------------------+
random4 == createdoriginal: True
The following my file sizes compared to zip for 4 digit and 8 digit random numbers: 
+----------------------------------------------------------------------------------------------------------------+
OriginalFile size: orighex.bin:  250000
ZipFile size: orighex.zip:  143111
BetterthanFile sizes: bettercompreesionthanzip*.bin:  125150
Byte Difference between ZipFile size and BetterthanFile sizes: 17961
Percentage Better Compression: 13%

AMillionRandom Digits Comparison - The first number below is the first 111 from AMillionRandomDigits.bin
+----------------------------------------------------------------------------------------------------------------+
0x100973253376520135863467354876809590911739292749453754204805648947429624805240372063610402008229166508422689531
+----------------------------------------------------------------------------------------------------------------+
Notice the similarity when adding the ODD/EVEN to the high/low as we do above: 
+----------------------------------------------------------------------------------------------------------------+
0x100771071176700117661067170676607770711717070707071770000607606707007600607000170061610000006007166706000667711
+----------------------------------------------------------------------------------------------------------------+
This creates a 4 digit XOR number just like we do for 8 digit and 4 digit random numbers above! 
+----------------------------------------------------------------------------------------------------------------+
0x000e02222200220022e02400224e00e0e2e0e0002e2e204e422024204e0204ee4042e024e0224020200200040200e22e00020e4220ee220
+----------------------------------------------------------------------------------------------------------------+
My algorithm creates the 66's / which are 1's when used as a map, same as above: (The next two numbers are the same 
, they are just used for different purposes. One purpose is to build the XOR MAP, which i can for AMillion Random 
Digits!
+----------------------------------------------------------------------------------------------------------------+
0x000660060066600006660066060666606660600606060606060660000606606606006600606000060060600000006006066606000666600
0x000110010011100001110011010111101110100101010101010110000101101101001100101000010010100000001001011101000111100
+----------------------------------------------------------------------------------------------------------------+
The next number is my XOR from the sixes to the XOR MAP i generate for AMillion Random Digits
+----------------------------------------------------------------------------------------------------------------+
0x000862242266420024862466244866808480800628282648442644204804648846428624804240262062600402008228066408422688420
+----------------------------------------------------------------------------------------------------------------+
This number is the next distance away from AMillionRandomDigits, which happens to be the ODD/EVEN Map
+----------------------------------------------------------------------------------------------------------------+
0x100111011110100111001001110010001110111111010101011110000001000101001000001000110001010000000001100100000001111
+----------------------------------------------------------------------------------------------------------------+
My algorithm generates the missing ODD/EVEN MAP and XOR back for 4 digit and 8 digit random numbers, but not for 
10 digit numbers. For 10 digit numbers it generates the highlow map (6's), the XOR Map, and a number who's entropy 
i'm evaluating to see if it matches a random 10 digit number. I'm holding back the algorithm for that until i
i evaluate it. If it's entropy is of a 10 digit number (really i shouldn't be telling you this, so if this idea helps
you crack entropy, please give me credit and $$ after your a billionaire)  then that means two wrong numbers can lead
 to a wrong answer which would be the right answer. If you understand that if the entropy is of a 10 digit number, you'll
understand why i think that you can get to AMillionRandomDigits using methods like this using two unrelated numbers.
 (Remember me if you crack entropy using two unrelated numbers $$ :) 
+----------------------------------------------------------------------------------------------------------------+
 It's cool to acheive 34% better compression than zip for four digits, and 1% better at eight digits for random numbers 
 Here are the size comparisons again: 
+----------------------------------------------------------------------------------------------------------------+
OriginalFile size: orighex.bin:  250000
ZipFile size: orighex.zip:  143111
BetterthanFile sizes: bettercompreesionthanzip*.bin:  125150
Byte Difference between ZipFile size and BetterthanFile sizes: 17961
Percentage Better Compression: 13%
random4 == createdoriginal: True
+----------------------------------------------------------------------------------------------------------------+
Again, Here is the 4 digit random number you created using betterthanzip(4) or betterthanzip(8) for different digit sizes
+----------------------------------------------------------------------------------------------------------------+
0x686628668446224444488284422466642268222248488642884262646684882226242882688268846626246682846266648826482422824
